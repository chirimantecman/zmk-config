/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    
    behaviors {
        // Number/Function key mod.
        n1_f1: n1_or_f1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n2_f2: n2_or_f2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n3_f3: n3_or_f3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n4_f4: n4_or_f4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n5_f5: n5_or_f5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n6_f6: n6_or_f6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n7_f7: n7_or_f7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n8_f8: n8_or_f8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n9_f9: n9_or_f9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        n0_f10: n0_or_f10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp F10>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rb_f11: rb_or_f11 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(RIGHT_BRACKET)>, <&kp F11>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slash_f12: slash_or_f12 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp F12>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I       &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K       &kp L    &kp SEMI  &kp LEFT_ALT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA   &kp DOT  &kp FSLH  &rgb_ug RGB_TOG
                         &kp LGUI  &mo 2  &kp SPACE    &kp RET  &mo 1  &kp ESCAPE
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp LS(EQUAL)     &kp LS(NUMBER_1)  &kp EQUAL          &kp LS(MINUS)     &kp RA(GRAVE)           &kp GRAVE              &kp HOME        &kp INSERT      &kp PRINTSCREEN  &kp END    &kp DEL
&trans  &kp LS(NUMBER_2)  &kp MINUS         &kp RA(BACKSLASH)  &kp LEFT_BRACKET  &kp LS(LEFT_BRACKET)    &kp RA(RIGHT_BRACKET)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW     &kp RIGHT  &trans
&trans  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_6)   &kp RA(Q)         &kp RA(SQT)             &kp RA(MINUS)          &kp LS(N7)      &kp LS(GRAVE)   &kp C_MUTE       &none      &trans
                                            &trans             &trans            &trans                  &trans                 &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &bt BT_SEL 3          &bt BT_SEL 2              &bt BT_SEL 1  &bt BT_SEL 0       &bt BT_CLR       &kp EQUAL          &n7_f7        &n8_f8        &n9_f9        &rb_f11                &trans
&trans  &kp SQT               &kp BACKSLASH             &kp LS(N8)    &kp LS(N9)         &kp LS(COMMA)    &kp RIGHT_BRACKET  &n4_f4        &n5_f5        &n6_f6        &n0_f10                &trans
&trans  &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp LS(SQT)   &kp LS(BACKSLASH)  &kp RA(SQT)      &kp LS(N7)         &n1_f1        &n2_f2        &n3_f3        &slash_f12             &trans
                                                        &trans        &trans             &trans           &trans             &trans        &trans
            >;
        };
        tri_layer {
            bindings = <
&trans  &trans                &trans                    &trans        &trans             &trans           &trans             &trans        &trans        &trans        &trans                 &trans
&trans  &trans                &trans                    &trans        &trans             &trans           &trans             &kp A         &kp B         &trans        &trans                 &trans
&trans  &trans                &trans                    &trans        &trans             &trans           &trans             &trans        &trans        &trans        &trans                 &trans
                                                        &trans        &trans             &trans           &trans             &trans        &trans
            >;
        };
    };
};

&led_strip {
    chain-length = <27>;
};